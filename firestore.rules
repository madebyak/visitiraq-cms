rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admin collection rules
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Categories collection rules
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can modify
    }
    
    // Listings collection rules
    match /listings/{listingId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can modify
    }
    
    // Details collections rules
    match /{detailsCollection}/{docId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can modify
      
      // Wildcard match for all detail collections
      match /data/{dataId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }
    
    // User collections rules
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /user_preferences/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /user_favorites/{docId} {
      allow read: if request.auth != null && (resource.data.user_id == request.auth.uid || isAdmin());
      allow write: if request.auth != null && request.data.user_id == request.auth.uid;
    }
    
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for reviews
      allow create: if request.auth != null && request.resource.data.user_id == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.user_id == request.auth.uid || isAdmin());
    }
    
    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
} 